---
// src/pages/projects/[slug].astro
import { getCollection, type CollectionEntry } from "astro:content";
import type { ProjectSchema } from "../../content/config";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getImage } from "astro:assets";
import { getProjectLink } from "../../utils/links";

export async function getStaticPaths() {
    const projects = await getCollection("projects");
    const sortedProjects = projects.sort(
        (a: CollectionEntry<"projects">, b: CollectionEntry<"projects">) =>
            a.data.order - b.data.order,
    );

    return sortedProjects.map(
        (project: CollectionEntry<"projects">, index: number) => {
            const nextProject =
                sortedProjects[(index + 1) % sortedProjects.length];
            return {
                params: { slug: project.slug },
                props: { project, nextProject },
            };
        },
    );
}

interface Props {
    project: CollectionEntry<"projects">;
    nextProject: CollectionEntry<"projects">;
}

const { project, nextProject } = Astro.props;
---

<BaseLayout
    backgroundColor={project.data.backgroundColor}
    title={project.data.title}
    metaDescription={project.data.metaDescription}
    metaKeywords={project.data.metaKeywords}
    pageType="projects"
>
    <div class="projectnavig-cont">
        <div class="projectnavig">
            <a
                class="projectnavig-following"
                href={getProjectLink(nextProject.slug)}
            >
                {nextProject.data.title.toUpperCase()}
            </a>
        </div>
    </div>

    <div class="detailslist" id="scrollpager">
        <div class="detailslist-desc">
            <p><strong>{project.data.title}</strong></p>
        </div>

        {
            project.data.images.map(
                async (image: ProjectSchema["images"][0], index: number) => {
                    const optimizedImage = await getImage({
                        src: image.default,
                        width: 1300,
                        height: 860,
                        format: "webp",
                    });

                    return (
                        <div class="detailslist-item">
                            <p class="t-counter">
                                {index + 1}/{project.data.images.length}
                            </p>
                            <img
                                src={optimizedImage.src}
                                width={1300}
                                height={860}
                                alt={image.title}
                                sizes="(min-width: 1300px) 1300px, 98vw"
                                loading={index === 0 ? "eager" : "lazy"}
                            />
                            <p class="t-desc">{image.description || ""}</p>
                        </div>
                    );
                },
            )
        }
    </div>
</BaseLayout>
